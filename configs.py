"""
Configurations for the ESNC Risk Notification runners. Includes global variables and config functions. 

Instruction: 
To be imported a module: import configs
"""

import os
import logging
import io
import sys
import boto3
import git

import sqlalchemy as sa
import datetime as dt

#####################
# Global variables

# Random seed 
SEED = 333

# Project variables (to be modified based on updates of the project setup)
STATES_LIST = ['KY', 'MD', 'TN']
CLASSIFICATION_THRESHOLD = 0.39 # see power analysis: https://github.com/reglab/epa_risk/blob/master/notebook/esnc_risk_notification_power_analysis.ipynb

# Set up connection with the database
DB_URI = os.getenv('EPA_DWH')
GET_ENGINE = lambda : sa.create_engine(DB_URI)

## S3 bucket Connection
BUCKET_NAME = 'epa-esnc-notif'
BUCKET_ACCESS_ID = os.getenv('REGLAB_AWS_ACCESS_ID')
BUCKET_ACCESS_KEY = os.getenv('REGLAB_AWS_ACCESS_KEY')
S3_RESOURCE = boto3.resource(service_name='s3')
BUCKET = S3_RESOURCE.Bucket(BUCKET_NAME)

# Directories
## Stanford Sherlock Environment
### Sherlock OAK deho group directory. note that this is not backed up.
OAK_DIR = os.getenv('OAK') 
GET_OAK_PROJECT_DIR = lambda : os.path.join(OAK_DIR, 'EPA', 'esnc_risk_notif_processing')
## S3 bucket
S3_PROJECT_DIR = os.path.join('s3://', BUCKET_NAME)

# Email sender
## production mode
PROD_FROM_ADDR = 'SNC_risk_notifications@epa.gov'
PROD_BCC_ADDR = 'hongjinl@law.stanford.edu' # Nicole Lin's email
## test mode
TEST_FROM_ADDR = os.getenv('REGLAB_TEST_GMAIL_ADDR')
TEST_TO_ADDR = os.getenv('REGLAB_TEST_GMAIL_ADDR')
TEST_ADDR_PWD = os.getenv('REGLAB_TEST_GMAIL_PWD')
TEST_BCC_ADDR = 'hongjinl@law.stanford.edu' # Nicole Lin's email

# Helper texts
## for email maker
HELPER_TEXT_EMAIL_MAKER = """
This is a runner for generating a notification for at risk permits determined by a ML model. Expected to be run on Stanford RegLab's production environment.
See this confluence page for documentation: https://asconfluence.stanford.edu/confluence/display/REGLAB/ESNC+Risk+Notification+Intervention. 
"""

## for whippet sender
HELPER_TEXT_WHIPPET_SENDER = """
This is a runner for sending a notification to at risk permits determined by a ML model. Expected to be run on EPA's production environment. 
See this confluence page for documentation: https://asconfluence.stanford.edu/confluence/display/REGLAB/ESNC+Risk+Notification+Intervention. 
"""

## for batch report sync
HELPER_TEXT_BATCH_REPORT_SYNC = """
This is runner for syncing batch report generated by whippet_sender to Stanford's Sherlock Oak folder and RegLab's AWS databsae. Expected to be run on Stanford's production environment.
See this confluence page for documentation: https://asconfluence.stanford.edu/confluence/display/REGLAB/ESNC+Risk+Notification+Intervention. 
"""

###############
# Config functions

def get_git_root(path):
    """
    Get the git repo root directory given the path of a file. 

    Parameters
    --------
    path: character
        the directory path of the file 

    Returns
    --------
    git_root_dir: character
        the git repo directory of the current working machine
    """
    git_repo = git.Repo(path, search_parent_directories=True)
    git_root_dir = git_repo.git.rev_parse("--show-toplevel")
    return git_root_dir

def configure_logging(logger_name):
    """
    Sets up logging. Logs to stringIO. Note: log file not saved. 
    
    Parameters
    --------
    logger_name: string
        name of the logger, e.g. email_maker or whippet_sender
    
    Returns
    --------
    logger: logging object
    log_capture_string: StringIO object
    """
    # Create the logger
    logger = logging.getLogger(logger_name)
    logger.setLevel(logging.DEBUG)

    # Setup the console handler with a StringIO object
    log_capture_string = io.StringIO()
    ch = logging.StreamHandler(log_capture_string)
    ch.setLevel(logging.DEBUG)

    # Optionally add a formatter
    formatter = logging.Formatter('[%(asctime)s] - %(name)s - %(levelname)s : %(message)s')
    ch.setFormatter(formatter)

    # Add the console handler to the logger
    logger.addHandler(ch)

    return logger, log_capture_string


